diff --git a/packages/shiki/rollup.config.js b/packages/shiki/rollup.config.js
index 7766cc3..319706e 100644
--- a/packages/shiki/rollup.config.js
+++ b/packages/shiki/rollup.config.js
@@ -4,8 +4,6 @@ import dts from 'rollup-plugin-dts'
 import typescript from 'rollup-plugin-typescript2'
 import copy from 'rollup-plugin-copy'
 import replace from '@rollup/plugin-replace'
-import { terser } from 'rollup-plugin-terser'
-import { version } from './package.json'

 const external = ['vscode-oniguruma', 'vscode-textmate']

@@ -33,62 +31,6 @@ export default [
       commonjs()
     ]
   },
-  {
-    input: 'src/index.ts',
-    output: [
-      {
-        file: 'dist/index.browser.mjs',
-        format: 'esm',
-        plugins: [
-          replace({
-            __CDN_ROOT__: ''
-          })
-        ]
-      },
-      {
-        file: 'dist/index.iife.js',
-        format: 'iife',
-        name: 'shiki',
-        extend: true,
-        plugins: [
-          replace({
-            __CDN_ROOT__: ''
-          })
-        ]
-      },
-      {
-        file: 'dist/index.unpkg.iife.js',
-        format: 'iife',
-        name: 'shiki',
-        extend: true,
-        plugins: [
-          replace({
-            __CDN_ROOT__: `https://unpkg.com/shiki@${version}/`
-          })
-        ]
-      },
-      {
-        file: 'dist/index.jsdelivr.iife.js',
-        format: 'iife',
-        name: 'shiki',
-        extend: true,
-        plugins: [
-          replace({
-            __CDN_ROOT__: `https://cdn.jsdelivr.net/npm/shiki@${version}/`
-          })
-        ]
-      }
-    ],
-    plugins: [
-      replace({
-        __BROWSER__: JSON.stringify(true)
-      }),
-      typescript(),
-      nodeResolve(),
-      commonjs(),
-      terser()
-    ]
-  },
   {
     input: 'src/index.ts',
     output: [
diff --git a/packages/shiki/src/languages.ts b/packages/shiki/src/languages.ts
index 13b1703..b45547c 100644
--- a/packages/shiki/src/languages.ts
+++ b/packages/shiki/src/languages.ts
@@ -136,7 +136,8 @@ export type Lang =
   | 'yaml'
   | 'zenscript'

-export const languages: ILanguageRegistration[] = [
+export const languages = []
+const _languages: ILanguageRegistration[] = [
   {
     id: 'abap',
     scopeName: 'source.abap',
diff --git a/packages/shiki/src/loader.ts b/packages/shiki/src/loader.ts
index f9d4b4d..deb7b89 100644
--- a/packages/shiki/src/loader.ts
+++ b/packages/shiki/src/loader.ts
@@ -3,20 +3,33 @@ import type { IOnigLib, IRawGrammar, IRawTheme } from 'vscode-textmate'
 import { loadWASM, createOnigScanner, createOnigString } from 'vscode-oniguruma'
 import { parse, ParseError } from 'jsonc-parser'
 import type { IShikiTheme } from './types'
+import { URL } from 'url'
+import { join as nodeJoin } from 'path'

 export const isWebWorker =
   typeof self !== 'undefined' && typeof self.WorkerGlobalScope !== 'undefined'

-export const isBrowser =
-  isWebWorker ||
-  (typeof window !== 'undefined' &&
-    typeof window.document !== 'undefined' &&
-    typeof fetch !== 'undefined')
+export const isBrowser = false

 // to be replaced by rollup
 let CDN_ROOT = '__CDN_ROOT__'
 let WASM: string | ArrayBuffer = ''

+export function isURL(string: string) {
+  try {
+    new URL(string)
+    return true
+  } catch {
+    return false
+  }
+}
+
+export function joinURL(urlString: string, ...paths: string[]) {
+  const url = new URL(urlString)
+  url.pathname = nodeJoin(url.pathname, ...paths).replace(/\\/g, '/')
+  return url.toString()
+}
+
 /**
  * Set the route for loading the assets
  * URL should end with `/`
@@ -99,6 +112,10 @@ function _resolvePath(filepath: string) {
  * @param filepath assert path related to ./packages/shiki
  */
 async function _fetchAssets(filepath: string): Promise<string> {
+  if (isURL(filepath)) {
+    return await fetch(filepath).then(r => r.text())
+  }
+
   const path = _resolvePath(filepath)
   if (isBrowser) {
     return await fetch(path).then(r => r.text())
@@ -130,7 +147,10 @@ export async function fetchTheme(themePath: string): Promise<IShikiTheme> {
   const shikiTheme = toShikiTheme(theme)

   if (shikiTheme.include) {
-    const includedTheme = await fetchTheme(join(dirname(themePath), shikiTheme.include))
+    const includedThemePath = isURL(themePath)
+      ? joinURL(themePath, '..', shikiTheme.include)
+      : join(dirname(themePath), shikiTheme.include)
+    const includedTheme = await fetchTheme(includedThemePath)

     if (includedTheme.settings) {
       shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings)
diff --git a/packages/shiki/src/themedTokenizer.ts b/packages/shiki/src/themedTokenizer.ts
index 85e93ee..0f8c58f 100644
--- a/packages/shiki/src/themedTokenizer.ts
+++ b/packages/shiki/src/themedTokenizer.ts
@@ -217,11 +217,19 @@ function matches(
   return false
 }

+const themeScopeCache: Map<string, IRawThemeSetting[]> = new Map()
+
 function explainThemeScope(
   theme: IRawTheme,
   scope: string,
   parentScopes: string[]
 ): IRawThemeSetting[] {
+  const cacheKey = `${theme.name} ${scope} ${parentScopes.sort().join(' ')}`
+  const cachedResult = themeScopeCache.get(cacheKey)
+  if (theme.name && cachedResult) {
+    return cachedResult
+  }
+
   let result: IRawThemeSetting[] = [],
     resultLen = 0
   for (let i = 0, len = theme.settings.length; i < len; i++) {
@@ -249,5 +257,7 @@ function explainThemeScope(
       }
     }
   }
+
+  themeScopeCache.set(cacheKey, result)
   return result
 }
diff --git a/packages/shiki/src/themes.ts b/packages/shiki/src/themes.ts
index 29ad0a9..5094e03 100644
--- a/packages/shiki/src/themes.ts
+++ b/packages/shiki/src/themes.ts
@@ -28,7 +28,9 @@ export type Theme =
   | 'vitesse-dark'
   | 'vitesse-light'

-export const themes: Theme[] = [
+export const themes = []
+
+const _themes: Theme[] = [
   'css-variables',
   'dark-plus',
   'dracula-soft',
